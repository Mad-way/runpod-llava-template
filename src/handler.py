# -*- coding: utf-8 -*-
"""3D model descriptor LlaVA

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QSIexEEecD-d84cCG7J3D-q-_tbD1QPB
"""

# Commented out IPython magic to ensure Python compatibility.
# @title Setup
import runpod
import os
from transformers import AutoTokenizer, BitsAndBytesConfig
from llava.model import LlavaLlamaForCausalLM
import torch

# @title Load model
print("Llava load in progress!")

os.chdir('/LLaVA')

model_path = "4bit/llava-v1.5-13b-3GB"
kwargs = {"device_map": "auto"}
kwargs['load_in_4bit'] = True
kwargs['quantization_config'] = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_compute_dtype=torch.float16,
    bnb_4bit_use_double_quant=True,
    bnb_4bit_quant_type='nf4'
)
model = LlavaLlamaForCausalLM.from_pretrained(model_path, low_cpu_mem_usage=True, **kwargs)
tokenizer = AutoTokenizer.from_pretrained(model_path, use_fast=False)

vision_tower = model.get_vision_tower()
if not vision_tower.is_loaded:
    vision_tower.load_model()
vision_tower.to(device='cuda')
image_processor = vision_tower.image_processor

print("Llava load is complete!")

# @title Import

import os
import requests
from PIL import Image
from llava.conversation import conv_templates, SeparatorStyle
from llava.utils import disable_torch_init
from llava.constants import IMAGE_TOKEN_INDEX, DEFAULT_IMAGE_TOKEN, DEFAULT_IM_START_TOKEN, DEFAULT_IM_END_TOKEN
from llava.mm_utils import tokenizer_image_token, get_model_name_from_path, KeywordsStoppingCriteria
from transformers import TextStreamer
import json
import io
from io import BytesIO
import base64

# @title Functions

def image_converter(json):
    # Откройте ваш JSON-файл
    data = json.load(json)

    # Преобразуйте словарь в список
    base64_images = data['Base64Images']

    images = []

    # Преобразование каждой строки Base64 в изображение PNG и добавление в массив
    for base64_string in base64_images:
        image_bytes = base64.b64decode(base64_string)
        image = Image.open(io.BytesIO(image_bytes))
        images.append(image)

    # Объединение всех изображений в одно
    widths, heights = zip(*(i.size for i in images))
    total_width = max(widths)
    max_height = sum(heights)

    new_image = Image.new('RGB', (total_width, max_height))

    y_offset = 0
    for image in images:
        new_image.paste(image, (0, y_offset))
        y_offset += image.height
    return new_image


def caption_image(image, prompt):
    disable_torch_init()
    conv_mode = "llava_v0"
    conv = conv_templates[conv_mode].copy()
    roles = conv.roles
    image_tensor = image_processor.preprocess(image, return_tensors='pt')['pixel_values'].half().cuda()
    inp = f"{roles[0]}: {prompt}"
    inp = DEFAULT_IM_START_TOKEN + DEFAULT_IMAGE_TOKEN + DEFAULT_IM_END_TOKEN + '\n' + inp
    conv.append_message(conv.roles[0], inp)
    conv.append_message(conv.roles[1], None)
    raw_prompt = conv.get_prompt()
    input_ids = tokenizer_image_token(raw_prompt, tokenizer, IMAGE_TOKEN_INDEX, return_tensors='pt').unsqueeze(0).cuda()
    stop_str = conv.sep if conv.sep_style != SeparatorStyle.TWO else conv.sep2
    keywords = [stop_str]
    stopping_criteria = KeywordsStoppingCriteria(keywords, tokenizer, input_ids)
    with torch.inference_mode():
      output_ids = model.generate(input_ids, images=image_tensor, do_sample=True, temperature=0.2,
                                  max_new_tokens=1024, use_cache=True, stopping_criteria=[stopping_criteria])
    outputs = tokenizer.decode(output_ids[0, input_ids.shape[1]:]).strip()
    conv.messages[-1][-1] = outputs
    output = outputs.rsplit('</s>', 1)[0]
    return output

#Handler для RunPod
def handler(event):
    """
    This is the handler function that will be called by RunPod serverless.
    """
    return process_input(event['input'])

def process_input(input):
    """
    Execute the application code
    """
    try:
        json_images = input['images']
        prompt = input['prompt']
        combined_images = image_converter(json_images)
        return caption_image(combined_images, prompt)
    except Exception as err:
        return f"Error: {err}"

# @title Test

print("Start TEST...")
response = requests.get("https://img.freepik.com/free-photo/adorable-looking-kitten-with-yarn_23-2150886292.jpg")
image = Image.open(BytesIO(response.content)).convert('RGB')
print("Test result: ", caption_image(image, "Describe this picture"))

# @title Runpod

if __name__ == "__main__":
    print("Starting RunPod...")
    runpod.serverless.start({"handler": handler})
